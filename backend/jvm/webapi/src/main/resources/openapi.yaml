openapi: 3.0.0
info:
  title: Ticket Management API
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
tags:
  - name: Authentication
  - name: Tickets 
  - name: Teams  
  - name: Categories
  - name: System
paths:
  /tickets:
    get:
      tags:
        - Tickets
      summary: Retrieve all tickets
      operationId: getAllTickets
      security:
        - basicAuth: [] 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
    post:
      tags:
        - Tickets
      summary: Create a new ticket
      operationId: createTicket
      security:
        - basicAuth: []
      requestBody:
        description: Ticket object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketPost'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
  /tickets/{id}:
    get:
      tags:
        - Tickets
      summary: Retrieve a specific ticket
      operationId: getTicketById
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/ticket_id" 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: Not found
    put:
      tags:
        - Tickets
      summary: Update a specific ticket
      operationId: updateTicketById
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/ticket_id" 
      requestBody:
        description: Ticket object to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: Not found
    delete:
      tags:
        - Tickets
      summary: Delete a specific ticket
      operationId: deleteTicketById
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/ticket_id" 
      responses:
        '204':
          description: No content
  
  /teams:
    get:
      tags:
        - Teams
      description: "Get all teams"
      operationId: "getAllTeams"
      security:
        - basicAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
    post:
      tags:
        - Teams
      description: "Add a new team"
      operationId: "createTeam"
      security:
        - basicAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamPost'
  /teams/{id}:
    get:
      tags:
        - Teams
      description: "Get Team by Id"
      operationId: "getTeamById"
      parameters:
        - $ref: "#/components/parameters/team_id" 
      responses:
        "200": 
          description: OK
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Team'
    put:
      tags:
        - Teams
      description: "Update Team by Id"
      operationId: "updateTeamById"
      parameters:
        - $ref: "#/components/parameters/team_id" 
      requestBody:
        description: Team object to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        "200": 
          description: OK
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Team'
    delete:
      tags:
        - Teams
      description: "Delete Team by Id"
      operationId: "deleteTeamById"
      parameters:
        - $ref: "#/components/parameters/team_id" 
      responses:
        "204": 
          description: No Content 

  /categories:
    get:
      tags:
        - Categories
      description: "Get all Categories"
      operationId: "getAllCategories"
      security:
        - basicAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      tags:
        - Categories
      description: "Add a new Category"
      operationId: "createCategory"
      security:
        - basicAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryPost'

  
  /categories/{id}:
    get:
      tags:
        - Categories
      description: "Get Category by Id"
      operationId: "getCategoryById"
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/category_id" 
      responses:
        "200": 
          description: OK
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Category'
    put:
      tags:
        - Categories
      description: "Update Category by Id"
      operationId: "updateCategoryById"
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/category_id" 
      requestBody:
        description: Category object to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        "200": 
          description: OK
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Category'
    delete:
      tags:
        - Categories
      description: "Delete Category by Id"
      operationId: "deleteCategoryById"
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/category_id" 
      responses:
        "204": 
          description: No Content 
      
  /webapi-health:
    get:
      tags:
        - System
      summary: Route with the porpuse of supplying Render with current time
      operationId: webApiHealth
      responses:
        '200':
          description: Success getting time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebApiHealth'



  /signup:
    post:
      tags:
        - Authentication
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: User object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /login:
    post:
      tags:
        - Authentication
      summary: Authenticate user and get token
      operationId: loginUser
      requestBody:
        description: User credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  
components:
  parameters:
    ticket_id:
      name: id
      in: path
      description: ID of ticket to retrieve
      required: true
      schema:
        type: string
        format: uuid
    team_id:
      name: id
      in: path
      description: ID of team to retrieve
      required: true
      schema:
        type: string
        format: uuid
    category_id:
      name: id
      in: path
      description: ID of category to retrieve
      required: true
      schema:
        type: string
        format: uuid
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    WebApiHealth:
      type: string
      
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string 
        etc:
          type: integer
          description: "Estimated Time of Completion"
        priority:
          type: string
          enum: 
            - URGENT
            - HIGH 
            - MEDIUM 
            - LOW
    CategoryPost:
      type: object
      properties:
        name:
          type: string 
        etc:
          type: integer
          description: "Estimated Time of Completion"
        priority:
          type: string
          enum: 
            - UERGENT
            - HIGH 
            - MEDIUM 
            - LOW
    TeamPost:
      type: object
      properties:
        name: 
          type: string
    Team:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name: 
          type: string
      
    Ticket:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        comment:
          type: string
        status:
          type: string
          enum:
            - CREATED
            - ON_GOING
            - SOLVED
            - CANCELLED
            - ARCHIVED
          default: CREATED
        category:
          type: string 
        create_date:
          type: string
          format: date-time
        update_date:
          type: string
          format: date-time
          nullable: true
        solved_date:
          type:  string
          format: date-time
          nullable: true
      required:
        - id
        - comment
        - status
        - category
        - create_date 
    TicketPost:
      type: object
      properties:
        category:
          type: string 
        comment:
          type: string
        create_date:
          type: string
          format: date-time
      required:
        - category
        - comment
        - create_date 
    
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        fname:
          type: string
        lname:
          type: string  
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
            - USER
            - EMPLOYEE
            - ADMIN
          default: USER
      required:
        - name
        - email
        - password
    Credentials:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    Token:
      type: object
      properties:
        token:
          type: string
      required:
        - token