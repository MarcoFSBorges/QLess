openapi: 3.0.0
info:
  title: Ticket Management API
  version: 1.0.0
servers:
  - url: http://localhost:8080/
tags:
  - name: Authentication
  - name: Tickets
  - name: Teams
  - name: Categories
  - name: System
paths:
  /tickets:
    get:
      tags:
        - Tickets
      summary: Retrieve all tickets
      operationId: getAllTickets
      security:
        - basicAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
    post:
      tags:
        - Tickets
      summary: Create a new ticket
      operationId: createTicket
      security:
        - basicAuth: []
      requestBody:
        description: Ticket object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketPost'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
  /tickets/{ticketId}:
    get:
      tags:
        - Tickets
      summary: Retrieve a specific ticket
      operationId: getTicketById
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/ticket_id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: Not found
    put:
      tags:
        - Tickets
      summary: Update a specific ticket
      operationId: updateTicketById
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/ticket_id"
      requestBody:
        description: Ticket object to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: Not found
    delete:
      tags:
        - Tickets
      summary: Delete a specific ticket
      operationId: deleteTicketById
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/ticket_id"
      responses:
        '204':
          description: No content
  /tickets/{ticketId}/messages:
    get:
      tags:
        - Tickets
      summary: Retrieve messages for a specific ticket
      operationId: getTicketMessages
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/ticket_id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '404':
          description: Not found

    post:
      tags:
        - Tickets
      summary: Create a new message for a specific ticket
      operationId: createTicketMessage
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/ticket_id"
      requestBody:
        description: Message object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessagePost'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /tickets/{ticketId}/messages/{messageId}:
    get:
      tags:
        - Tickets
      summary: Retrieve a specific message for a ticket
      operationId: getTicketMessageById
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/ticket_id"
        - $ref: "#/components/parameters/message_id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Not found

    put:
      tags:
        - Tickets
      summary: Update a specific message for a ticket
      operationId: updateTicketMessageById
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/ticket_id"
        - $ref: "#/components/parameters/message_id"
      requestBody:
        description: Message object to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Not found

    delete:
      tags:
        - Tickets
      summary: Delete a specific message for a ticket
      operationId: deleteTicketMessageById
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/ticket_id"
        - $ref: "#/components/parameters/message_id"
      responses:
        '204':
          description: No content
  /tickets/{ticketId}/attachments:
    get:
      tags:
        - Tickets
      summary: Retrieve attachments of a ticket
      operationId: getAttachmentsByTicketId
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/ticket_id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attachment'
    post:
      tags:
        - Tickets
      summary: Create a new attachment for a ticket
      operationId: createAttachment
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/ticket_id"
      requestBody:
        description: Attachment object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachmentPost'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
  /tickets/{ticketId}/attachments/{attachmentId}:
    get:
      tags:
        - Tickets
      summary: Retrieve a specific attachment of a ticket
      operationId: getAttachmentById
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/ticket_id"
        - $ref: "#/components/parameters/attachment_id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '404':
          description: Not found
    put:
      tags:
        - Tickets
      summary: Update a specific attachment of a ticket
      operationId: updateAttachmentById
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/ticket_id"
        - $ref: "#/components/parameters/attachment_id"
      requestBody:
        description: Attachment object to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attachment'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '404':
          description: Not found
    delete:
      tags:
        - Tickets
      summary: Delete a specific attachment of a ticket
      operationId: deleteAttachmentById
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/ticket_id"
        - $ref: "#/components/parameters/attachment_id"
      responses:
        '204':
          description: No content

  /teams:
    get:
      tags:
        - Teams
      description: "Get all teams"
      operationId: "getAllTeams"
      security:
        - basicAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
    post:
      tags:
        - Teams
      description: "Add a new team"
      operationId: "createTeam"
      security:
        - basicAuth: []
      requestBody:
        description: Team object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamPost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
  /teams/{teamId}:
    get:
      tags:
        - Teams
      description: "Get Team by Id"
      operationId: "getTeamById"
      parameters:
        - $ref: "#/components/parameters/team_id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    put:
      tags:
        - Teams
      description: "Update Team by Id"
      operationId: "updateTeamById"
      parameters:
        - $ref: "#/components/parameters/team_id"
      requestBody:
        description: Team object to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    delete:
      tags:
        - Teams
      description: "Delete Team by Id"
      operationId: "deleteTeamById"
      parameters:
        - $ref: "#/components/parameters/team_id"
      responses:
        "204":
          description: No Content

  /categories:
    get:
      tags:
        - Categories
      description: "Get all Categories"
      operationId: "getAllCategories"
      security:
        - basicAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      tags:
        - Categories
      description: "Add a new Category"
      operationId: "createCategory"
      security:
        - basicAuth: []
      requestBody:
        description: Category object to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryPost'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'


  /categories/{categoryId}:
    get:
      tags:
        - Categories
      description: "Get Category by Id"
      operationId: "getCategoryById"
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/category_id"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    put:
      tags:
        - Categories
      description: "Update Category by Id"
      operationId: "updateCategoryById"
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/category_id"
      requestBody:
        description: Category object to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    delete:
      tags:
        - Categories
      description: "Delete Category by Id"
      operationId: "deleteCategoryById"
      security:
        - basicAuth: []
      parameters:
        - $ref: "#/components/parameters/category_id"
      responses:
        "204":
          description: No Content

  /webapi-health:
    get:
      tags:
        - System
      summary: Route with the porpuse of supplying Render with current time
      operationId: webApiHealth
      responses:
        '200':
          description: Success getting time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebApiHealth'



  /signup:
    post:
      tags:
        - Authentication
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: User object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPost'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /login:
    post:
      tags:
        - Authentication
      summary: Authenticate user and get token
      operationId: loginUser
      requestBody:
        description: User credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'

components:
  parameters:
    attachment_id:
      name: attachmentId
      in: path
      description: ID of Message to retrieve
      required: true
      schema:
        type: string
        format: uuid
    message_id:
      name: messageId
      in: path
      description: ID of Message to retrieve
      required: true
      schema:
        type: string
        format: uuid
    ticket_id:
      name: ticketId
      in: path
      description: ID of ticket to retrieve
      required: true
      schema:
        type: string
        format: uuid
    team_id:
      name: teamId
      in: path
      description: ID of team to retrieve
      required: true
      schema:
        type: string
        format: uuid
    category_id:
      name: categoryId
      in: path
      description: ID of category to retrieve
      required: true
      schema:
        type: string
        format: uuid
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    Attachment:
      type: object
      properties:
        attachmentId:
          type: string
          format: uuid
        ticketId:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 255
        createDate:
          type: string
          format: date-time
        content:
          type: string
          format: binary
      required:
        - attachmentId
        - ticketId
        - createDate
        - content
      example:
        attachmentId: 123e4567-e89b-12d3-a456-426614174000
        ticketId: 987e6543-21dc-ba98-6543-647416142000
        name: Example Attachment
        createDate: '2023-05-14T12:34:56Z'
        content: "..."

    AttachmentPost:
      type: object
      properties:
        ticketId:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 255
        createDate:
          type: string
          format: date-time
        content:
          type: string
          format: byte
      required:
        - ticketId
        - createDate
        - content
      example:
        ticketId: 987e6543-21dc-ba98-6543-647416142000
        name: New Attachment
        createDate: '2023-05-14T12:34:56Z'
        content: "..."
    Message:
      type: object
      properties:
        messageId:
          type: string
          format: uuid
        ticketId:
          type: string
          format: uuid
        sentByEmployee:
          type: string
        content:
          type: string
        timeSent:
          type: string
          format: date-time
      required:
        - messageId
        - ticketId
        - sentByEmployee
        - content
        - timeSent

    MessagePost:
      type: object
      properties:
        sender:
          type: string
        content:
          type: string
    WebApiHealth:
      type: string

    Category:
      type: object
      properties:
        categoryId:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        eta:
          type: integer
          description: "Estimated Time of Accomplishment"
        priority:
          type: string
          enum:
            - URGENT
            - HIGH
            - MEDIUM
            - LOW
    CategoryPost:
      type: object
      properties:
        name:
          type: string
        eta:
          type: integer
          description: "Estimated Time of Accomplishment"
        priority:
          type: string
          enum:
            - URGENT
            - HIGH
            - MEDIUM
            - LOW
    TeamPost:
      type: object
      properties:
        name:
          type: string
    Team:
      type: object
      properties:
        teamId:
          type: string
          format: uuid
        name:
          type: string

    Ticket:
      type: object
      properties:
        ticketId:
          type: string
          format: uuid
        openedBy:
          type: string
          format: uuid
        treatedBy:
          type: string
          format: uuid
        categoryId:
          type: string
          format: uuid
        stateId:
          type: string
          format: uuid
        create_date:
          type: string
          format: date-time
        update_date:
          type: string
          format: date-time
        solved_date:
          type: string
          format: date-time
      required:
        - ticketId
        - openedBy
        - categoryId
        - stateId
        - create_date
    TicketPost:
      type: object
      properties:
        categoryId:
          type: string
        openedBy:
          type: string
          format: uuid
        comment:
          type: string
        create_date:
          type: string
          format: date-time
      required:
        - category
        - comment
        - create_date
    User:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
        fname:
          type: string
        lname:
          type: string
        email:
          type: string
        password:
          type: string
    UserPost:
      type: object
      properties:
        username:
          type: string
        fname:
          type: string
        lname:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
            - USER
            - EMPLOYEE
            - ADMIN
          default: USER
    Credentials:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    Token:
      type: object
      properties:
        token:
          type: string
      required:
        - token